Mastering native arrays in Java

Here's a complete rundown of:

✅ How to create/initialize native arrays
✅ How to access/modify elements
✅ Common ways to operate on arrays (loops, copying, etc.)
✅ Useful utility methods
✅ Tips and gotchas for algorithms and work



🧱 1. Declaring and Instantiating Native Arrays

🔹 Fixed-length arrays (default values):

int[] nums = new int[5];         // [0, 0, 0, 0, 0]
String[] words = new String[3];  // [null, null, null]

- Length is fixed when declared.
- Values are auto-initialized:
   - Primitives → 0, 0.0, false
   - References → null


🔹 Inline initialization:

int[] nums = {1, 2, 3, 4};
String[] names = {"Alice", "Bob"};

- You don’t need new here — Java infers the size and type.


🔹 Explicit new with inline values:

int[] nums = new int[] {1, 2, 3, 4};  // Useful in method calls

Required when you're not declaring the variable inline.



🧩 2. Accessing and Modifying Elements

int[] arr = {10, 20, 30};
System.out.println(arr[1]);     // 20
arr[2] = 99;                    // arr = [10, 20, 99]

⚠️ Always zero-based indexing
❌ arr[3] throws ArrayIndexOutOfBoundsException for a length-3 array



🔁 3. Looping Over Arrays

🔸 Traditional for loop:

for (int i = 0; i < arr.length; i++) {
    System.out.println(arr[i]);
}


🔸 Enhanced for loop (for-each):

for (int num : arr) {
    System.out.println(num);
}

✅ Simpler syntax for read-only traversal
❌ You can’t get or modify the index



🛠 4. Common Operations on Arrays
| Operation          | Syntax / Example                   | Notes                                 |
| ------------------ | ---------------------------------- | ------------------------------------- |
| **Length**         | `arr.length`                       | No `()` — it's a property, not method |
| **Sort**           | `Arrays.sort(arr)`                 | In-place sort                         |
| **Copy**           | `Arrays.copyOf(arr, newLength)`    | Returns a new array                   |
| **Clone**          | `int[] b = arr.clone()`            | Shallow copy                          |
| **To String**      | `Arrays.toString(arr)`             | Prints readable format                |
| **Fill**           | `Arrays.fill(arr, 42)`             | Sets all elements to value            |
| **Binary Search**  | `Arrays.binarySearch(arr, target)` | Must be sorted                        |
| **Equality Check** | `Arrays.equals(arr1, arr2)`        | Checks values, not references         |

✅ Import required:
import java.util.Arrays;



📊 Example Use Case

int[] nums = {4, 2, 1, 3};
Arrays.sort(nums); // [1, 2, 3, 4]

for (int n : nums) {
    System.out.print(n + " ");
}



🚫 Common Gotchas
| Mistake                                | Why it's a problem                               |
| -------------------------------------- | ------------------------------------------------ |
| Accessing `arr[arr.length]`            | Index out of bounds (last index is `length - 1`) |
| Using `.length()` instead of `.length` | Arrays use property, not method                  |
| Assuming deep copy from `=`            | `int[] a = b` copies reference, not values       |
| Forgetting `.toString()` for printing  | `System.out.println(arr)` shows memory address   |



🎯 For Algorithms
| Use Case              | Tip                                  |
| --------------------- | ------------------------------------ |
| Frequency count (a-z) | `int[] freq = new int[26];`          |
| Two-pointer problems  | Use indices directly                 |
| Prefix sum            | `int[] prefix = new int[n+1];`       |
| Sliding window sum    | Maintain `sum += arr[i] - arr[i-k];` |
| Reversing array       | Swap `arr[i]` with `arr[n-1-i]`      |
| Modifying in place    | Arrays are mutable                   |



✅ Summary Cheat Sheet
| What                   | How                                    |
| ---------------------- | -------------------------------------- |
| Declare fixed size     | `int[] a = new int[10];`               |
| Initialize with values | `int[] a = {1, 2, 3};`                 |
| Access element         | `a[2]`                                 |
| Get size               | `a.length`                             |
| Loop                   | `for (int i = 0; i < a.length; i++)`   |
| Sort                   | `Arrays.sort(a)`                       |
| Copy                   | `int[] b = Arrays.copyOf(a, a.length)` |
| Print                  | `Arrays.toString(a)`                   |







Questions:
- Can you give me a better understanding of <T>? As in like List<T> or ArrayList<T>? What is it again? I know its used, for instance, to be able to 
have both strings, integers, and objects in an ArrayList for example.
- Can you give me a crash course and rundown on generics, wrappers/wrapper types, <T> and related subjects in Java? I feel I get them mixed up often
and dont have a strong grasp and understanding of them. I would like to make sure I have these fundamentals down and reinforce my understanding.

- Teach me about the fundamentals of Object Oriented Programming (OOP) as it relates to Java. Since I already work in Java for work, I believe I 
have a familiarty ingrained in me about the principles - but just to have the fundamentals enshrined and reinforced in my head can you give me a 
somewhat detailed crash course. Can you then also give me a rundown on what OOP principles or OOP related questions I can be asked in a SWE 1 or 2 
technical interview?