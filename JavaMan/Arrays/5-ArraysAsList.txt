🧠 What is Arrays.asList()?


- Arrays.asList(T... a) is a static method in the java.util.Arrays class that
converts an array into a fixed-size List backed by the array.

import java.util.Arrays;
import java.util.List;

String[] namesArray = {"Alice", "Bob", "Charlie"};
List<String> namesList = Arrays.asList(namesArray);



✅ Basic Behavior
- Converts T[] → List<T>
- Returned list is backed by the original array.
- Changes to the array affect the list and vice versa.

String[] arr = {"a", "b", "c"};
List<String> list = Arrays.asList(arr);

System.out.println(list); // [a, b, c]

arr[1] = "z";
System.out.println(list); // [a, z, c] — list reflects array change



⚠️ Major Gotchas & Limitations

❌ 1. Fixed-size list

List<String> list = Arrays.asList("a", "b", "c");
list.add("d");    // ❌ Throws UnsupportedOperationException
list.remove(1);   // ❌ Same

- The returned List supports get/set, but not add/remove.


✅ Solution if you want a modifiable list:

List<String> list = new ArrayList<>(Arrays.asList("a", "b", "c"));
list.add("d"); // ✅ Works fine


❌ 2. Primitive arrays are not handled properly

int[] nums = {1, 2, 3};
List<int[]> list = Arrays.asList(nums);  // ❗ List of 1 element: the int[] itself

System.out.println(list.size()); // 1
System.out.println(list.get(0)); // [I@hexcode (memory address)

- Use boxed types (Integer[]) instead:

Integer[] nums = {1, 2, 3};
List<Integer> list = Arrays.asList(nums); // ✅ [1, 2, 3]



🧱 Arrays.asList() Summary Table
| Feature                          | Behavior                                    |
| -------------------------------- | ------------------------------------------- |
| Converts array to `List`         | ✅ Yes                                       |
| Backed by original array         | ✅ Yes                                       |
| Supports `.get(i)` and `.set(i)` | ✅ Yes                                       |
| Supports `.add()` / `.remove()`  | ❌ No — throws exception                     |
| Works with primitives directly   | ❌ No — wraps the whole array as one element |
| Modifiable copy                  | `new ArrayList<>(Arrays.asList(...))`       |



✅ When to Use Arrays.asList()
| Use Case                                | Use It?                         |
| --------------------------------------- | ------------------------------- |
| Quick fixed-size list (e.g., constants) | ✅ Yes                           |
| Looping through array as list           | ✅ Yes                           |
| Need to mutate (add/remove)             | ❌ Wrap with `new ArrayList<>()` |
| Using primitive arrays                  | ❌ Convert to boxed type first   |



✅ Real Example

List<String> roles = Arrays.asList("ADMIN", "MODERATOR", "USER");
if (roles.contains("MODERATOR")) {
    // do something
}



✅ Proper Ways to Convert int[] or char[] to List<Integer> or List<Character>

🔹 1. Use a loop (manual boxing)

Convert int[] → List<Integer>:

int[] arr = {1, 2, 3};
List<Integer> list = new ArrayList<>();

for (int num : arr) {
    list.add(num); // autoboxing: int → Integer
}

Convert char[] → List<Character>:

char[] chars = {'a', 'b', 'c'};
List<Character> list = new ArrayList<>();

for (char ch : chars) {
    list.add(ch); // autoboxing: char → Character
}

✅ Best compatibility, no surprises


🔹 2. Using Java Streams (Java 8+)

int[] → List<Integer>:

int[] arr = {1, 2, 3};
List<Integer> list = Arrays.stream(arr)          // IntStream
                           .boxed()              // box each int to Integer
                           .collect(Collectors.toList());

char[] → List<Character> (no direct stream, so manual boxing):

char[] chars = {'x', 'y', 'z'};
List<Character> list = new ArrayList<>();

for (char c : chars) {
    list.add(c);
}

⚠️ There is no .boxed() for CharStream in Java, because it doesn't exist — you'll need to manually box char[].



🔹 3. If you're already using wrapper arrays (Integer[] or Character[])

Then Arrays.asList() works just fine:

Integer[] arr = {1, 2, 3};
List<Integer> list = Arrays.asList(arr); // ✅

Character[] chars = {'a', 'b', 'c'};
List<Character> charList = Arrays.asList(chars); // ✅

✅ Simple and clean — but requires that the array is already of wrapper type.



🧾 Summary: Converting Primitive Arrays to List
| From        | To                | Best Approach                                  |
| ----------- | ----------------- | ---------------------------------------------- |
| `int[]`     | `List<Integer>`   | Loop or Streams `.boxed()`                     |
| `char[]`    | `List<Character>` | Loop (no char stream exists)                   |
| `Integer[]` | `List<Integer>`   | `Arrays.asList(...)`                           |
| `int[]`     | `List<int[]>`     | ⚠️ What `Arrays.asList()` returns (not useful) |



✅ Example: Stream Conversion for int[]
import java.util.*;
import java.util.stream.*;

public class Main {
    public static void main(String[] args) {
        int[] nums = {1, 2, 3, 4};
        List<Integer> list = Arrays.stream(nums)
                                   .boxed()
                                   .collect(Collectors.toList());

        System.out.println(list); // [1, 2, 3, 4]
    }
}





