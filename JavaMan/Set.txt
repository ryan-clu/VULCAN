Set & HashSet
---

- Crash summary of Java‚Äôs Set interface and the most commonly used implementation: HashSet.


‚úÖ What Is a Set in Java?
- A Set is a collection that contains no duplicate elements.

Set<Type> mySet = new HashSet<>();

- No duplicates
- No guaranteed order (unless you use LinkedHashSet or TreeSet)
- Very fast for basic operations: add, remove, contains (O(1) avg in HashSet)



‚úÖ When and Why to Use a Set
| Use Case             | Why Set Is Good                                                   |
| -------------------- | ----------------------------------------------------------------- |
| Eliminate duplicates | Automatically ensures uniqueness                                  |
| Fast lookup          | `contains()` is very fast (hash-based)                            |
| Track seen elements  | Useful in algorithms (e.g. `Set<Character>` to check for repeats) |
| Membership checking  | Similar to how you'd use a `Set` in Python or JS                  |



‚úÖ Common Implementation: HashSet

Set<String> fruits = new HashSet<>();
fruits.add("apple");
fruits.add("banana");
fruits.add("apple"); // ignored, no duplicate added



üöÄ Commonly Used Methods (on both Set and HashSet)
| Method                           | Description                                                           | Time Complexity                                         |
| -------------------------------- | --------------------------------------------------------------------- | ------------------------------------------------------- |
| `add(E element)`                 | Adds item (returns `false` if already present)                        | **O(1)** avg, **O(n)** worst                            |
| `contains(Object o)`             | Checks if an item exists                                              | **O(1)** avg, **O(n)** worst                            |
| `remove(Object o)`               | Removes the element (if present)                                      | **O(1)** avg, **O(n)** worst                            |
| `isEmpty()`                      | Checks if the set is empty                                            | **O(1)**                                                |
| `size()`                         | Returns number of elements                                            | **O(1)**                                                |
| `clear()`                        | Empties the set                                                       | **O(n)**                                                |
| `for (E item : set)`             | Iterate over all elements                                             | **O(n)**                                                |
| `set.addAll(Collection<?> c)`    | Adds all elements from another collection                             | **O(m)** ‚Äî where *m* is the size of `c`                 |
| `set.retainAll(Collection<?> c)` | Retains only elements also in the given collection (set intersection) | **O(n)** to **O(n + m)** depending on backing structure |
| `set.removeAll(Collection<?> c)` | Removes all elements in the given collection (set difference)         | **O(m)** to **O(n + m)** depending on backing structure |



üß† Key Usage Implications
| Characteristic            | What It Means                                         |
| ------------------------- | ----------------------------------------------------- |
| ‚ùå No duplicates           | Adding same element again does nothing                |
| ‚ùå No order (in `HashSet`) | Insertion order is *not preserved*                    |
| ‚úÖ Fast lookup             | Uses hash table internally ‚Äî constant time operations |
| ‚ùå No indexing             | You can‚Äôt use `.get(0)` ‚Äî must iterate                |


üî• Quick Example

Set<Integer> seen = new HashSet<>();
int[] nums = {1, 2, 3, 2, 1};

for (int num : nums) {
    if (seen.contains(num)) {
        System.out.println("Duplicate found: " + num);
    } else {
        seen.add(num);
    }
}


üß† Bonus: Other Set Types
| Type            | Ordered? | Sorted? | Notes                                                    |
| --------------- | -------- | ------- | -------------------------------------------------------- |
| `HashSet`       | ‚ùå No     | ‚ùå No    | Fastest, most commonly used                              |
| `LinkedHashSet` | ‚úÖ Yes    | ‚ùå No    | Maintains insertion order                                |
| `TreeSet`       | ‚ùå No     | ‚úÖ Yes   | Automatically sorted (uses `Comparable` or `Comparator`) |


‚úÖ TL;DR
- Use HashSet when you need uniqueness and fast lookup
- No duplicates, no order, no indexing
- Most important methods: add, contains, remove, size, for-each loop