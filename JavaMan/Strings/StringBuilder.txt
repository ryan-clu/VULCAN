StringBuilder
---

‚úÖ What is StringBuilder?
- StringBuilder is a mutable sequence of characters ‚Äî you can append to it, delete from it, etc., 
without creating new objects.
- String is immutable ‚Äî once created, its contents can't be changed.

- StringBuilder is one of the most useful classes in Java for working with strings efficiently. 
It's especially critical in loops or when building strings dynamically, like in parsing, formatting, or generating output.



üß† Why StringBuilder?
- Strings in Java are immutable, meaning once created, they cannot be changed. Every time you do:

str += "abc";

Java creates a new String object, which is inefficient inside loops or large operations. Every time you modify a 
string (like with +=), a new String object is created in memory; a new string is allocated and all characters 
are copied over.

Why is that inefficient? Memory usage: Each intermediate string is a new object in memory.


- StringBuilder avoids this by creating a mutable character sequence that you can build on efficiently.
- StringBuilder stores characters in a resizable internal array.
- When you call .append("a"), it modifies the array in-place ‚Äî no new objects are created. 
- It only allocates new memory if it runs out of internal space (and even then, it copies just once).



üõ†Ô∏è Commonly Used Methods
| Method                | What it does                    | Example                     | Time Complexity    |
| --------------------- | ------------------------------- | --------------------------- | ------------------ |
| `.append(...)`        | Adds to the end                 | `sb.append("abc");`         | **O(1)** amortized |
| `.insert(index, ...)` | Inserts at an index             | `sb.insert(0, "Hi ");`      | **O(n)**           |
| `.delete(start, end)` | Deletes substring \[start, end) | `sb.delete(2, 5);`          | **O(n)**           |
| `.reverse()`          | Reverses the characters         | `sb.reverse();`             | **O(n)**           |
| `.toString()`         | Converts to regular `String`    | `String s = sb.toString();` | **O(n)**           |
| `.setCharAt(i, c)`    | Changes char at index           | `sb.setCharAt(0, 'X');`     | **O(1)**           |
| `.length()`           | Gets length of builder          | `sb.length();`              | **O(1)**           |
| `.charAt(i)`          | Gets char at index `i`          | `sb.charAt(1);`             | **O(1)**           |



‚úÖ Basic Example

StringBuilder sb = new StringBuilder();

sb.append("Hello");
sb.append(" ");
sb.append("World!");

System.out.println(sb.toString()); // Output: Hello World!



üìà Performance Comparison

String s = "";
for (int i = 0; i < 10000; i++) {
    s += "a"; // BAD: Creates a new String each time
}

StringBuilder sb = new StringBuilder();
for (int i = 0; i < 10000; i++) {
    sb.append("a"); // GOOD: Efficient and fast
}



üõ†Ô∏è STRINGBUILDER VERSUS STRING

StringBuilder behaves similarly to String in many ways, including offering 
methods like .charAt() and .length(). But it's not identical ‚Äî some methods 
differ or are missing because of mutability.



‚úÖ StringBuilder Methods Similar to String
| Method                   | Works on `StringBuilder`? | Same as `String`? | Notes                                        |
| ------------------------ | ------------------------- | ----------------- | -------------------------------------------- |
| `.charAt(index)`         | ‚úÖ Yes                     | ‚úÖ Yes             | Get character at index                       |
| `.length()`              | ‚úÖ Yes                     | ‚úÖ Yes             | Number of characters                         |
| `.substring(start, end)` | ‚úÖ Yes                     | ‚úÖ Yes             | Returns a new `String`                       |
| `.indexOf(...)`          | ‚ùå No                      | ‚úÖ String only     | Use workaround                               |
| `.contains(...)`         | ‚ùå No                      | ‚úÖ String only     | Convert to string first                      |
| `.equals(...)`           | ‚úÖ Inherited, but ‚ö†        | ‚ö† Different       | Compares object references unless overridden |
| `.toString()`            | ‚úÖ Yes                     | ‚úÖ Yes             | Returns the built string                     |



üîÑ Example of Shared Methods
StringBuilder sb = new StringBuilder("Ryan");

char letter = sb.charAt(1);         // 'y'
int len = sb.length();              // 4
String partial = sb.substring(1, 3); // "ya"



‚ö†Ô∏è Methods StringBuilder does not have
StringBuilder is optimized for modifying strings, not searching or comparing them.

You won‚Äôt find:

.contains()
.indexOf() (on older JDKs)
.endsWith(), .startsWith()
.equalsIgnoreCase()

üëâ To use those, convert to a String:

if (sb.toString().contains("ya")) {
    // do something
}



üß† Summary
| Feature                     | String | StringBuilder               |
| --------------------------- | ------ | --------------------------- |
| Immutable                   | ‚úÖ      | ‚ùå (mutable)                 |
| `.charAt()`                 | ‚úÖ      | ‚úÖ                           |
| `.length()`                 | ‚úÖ      | ‚úÖ                           |
| Modifiable (`append`, etc.) | ‚ùå      | ‚úÖ                           |
| `.contains()`               | ‚úÖ      | ‚ùå (use `.toString()` first) |
